import AsyncStorage from '@react-native-async-storage/async-storage';

import { keys } from '../../env/keys';

// export const SIGNUP = 'SIGNUP';
// export const LOGIN = 'LOGIN';
export const LOGOUT = 'LOGOUT';
export const AUTHENTICATE = 'AUTHENTICATE';

let timer;

// export const authenticate = (userId, token) => {
//   return { type: AUTHENTICATE, userId: userId, token: token };
// };

export const authenticate = (userId, token, expiryTime) => {
	return (dispatch) => {
		dispatch(setLogoutTimer(expiryTime));
		dispatch({ type: AUTHENTICATE, userId: userId, token: token });
	};
};

export const signup = (email, password) => {
	return async (dispatch) => {
		const response = await fetch(
			`https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${keys.firebaseWebAPIkey}`,
			{
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify({
					email: email,
					password: password,
					returnSecureToken: true,
				}),
			}
		);

		if (!response.ok) {
			const errorResData = await response.json();
			const errorId = errorResData.error.message;
			let message = `–ù–µ—â–æ —Å–µ –æ–±—ä—Ä–∫–∞. –û—Ç–≥–æ–≤–æ—Ä –Ω–∞ —Å—ä—Ä–≤—ä—Ä–∞:${errorId}`;
			if (errorId === 'EMAIL_EXISTS') {
				message = '–¢–æ–∑–∏ email –µ –≤–µ—á–µ –µ –∏–∑–ø–æ–ª–∑–≤–∞–Ω';
			} else if (errorId === 'TOO_MANY_ATTEMPTS_TRY_LATER') {
				message = '–¢–≤—ä—Ä–¥–µ –º–Ω–æ–≥–æ –Ω–µ—É—Å–ø–µ—à–Ω–∏ –æ–ø–∏—Ç–∏, –æ–ø–∏—Ç–∞–π—Ç–µ –º–∞–ª–∫–æ –ø–æ-–∫—ä—Å–Ω–æ...';
			}

			throw new Error(message);
		}

		const resData = await response.json();

		dispatch(
			authenticate(
				resData.localId,
				resData.idToken,
				parseInt(resData.expiresIn) * 1000
			)
		);

		const expirationDate = new Date(
			new Date().getTime() + parseInt(resData.expiresIn) * 1000
		);
		saveDataToStorage(resData.idToken, resData.localId, expirationDate);
	};
};

export const login = (email, password) => {
	return async (dispatch) => {
		const response = await fetch(
			`https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${keys.firebaseWebAPIkey}`,
			{
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify({
					email: email,
					password: password,
					returnSecureToken: true,
				}),
			}
		);

		if (!response.ok) {
			const errorResData = await response.json();
			const errorId = errorResData.error.message;
			let message = `–ù–µ—â–æ —Å–µ –æ–±—ä—Ä–∫–∞. –û—Ç–≥–æ–≤–æ—Ä –Ω–∞ —Å—ä—Ä–≤—ä—Ä–∞:${errorId}`;
			if (errorId === 'EMAIL_NOT_FOUND') {
				message = 'üòº –ù–µ –æ—Ç–∫—Ä–∏—Ö–º–µ —Ç–æ–∑–∏ e-mail –≤ –±–∞–∑–∞—Ç–∞ –Ω–∏.';
			} else if (errorId === 'INVALID_EMAIL') {
				message = 'üòº –¢–æ–≤–∞ –Ω–µ –∏–∑–≥–ª–µ–∂–¥–∞ –∫–∞—Ç–æ –≤–∞–ª–∏–¥–µ–Ω e-mail';
			} else if (errorId === 'INVALID_PASSWORD') {
				message = 'üòº –¢–∞–∑–∏ –ø–∞—Ä–æ–ª–∞ –µ –≥—Ä–µ—à–Ω–∞ ^^';
			} else if (errorId === 'MISSING_PASSWORD') {
				message = 'üòº –ù–µ —Å—Ç–µ –≤—ä–≤–µ–ª–∏ –ø–∞—Ä–æ–ª–∞';
			}

			throw new Error(message);
		}

		const resData = await response.json();

		dispatch(
			authenticate(
				resData.localId,
				resData.idToken,
				parseInt(resData.expiresIn) * 1000
			)
		);
		const expirationDate = new Date(
			new Date().getTime() + parseInt(resData.expiresIn) * 1000
		);
		saveDataToStorage(resData.idToken, resData.localId, expirationDate);
	};
};

export const logout = () => {
	clearLogoutTimer();
	saveDataToStorage(null, null, new Date());
	return { type: LOGOUT };
};

const clearLogoutTimer = () => {
	if (timer) {
		clearTimeout(timer);
	}
};

//set timer for autologout when the token expires
const setLogoutTimer = (expirationTime) => {
	return (dispatch) => {
		timer = setTimeout(() => {
			dispatch(logout());
		}, expirationTime);
	};
};

//saving user data to async storage
const saveDataToStorage = async (token, userId, expirationDate) => {
	try {
		await AsyncStorage.setItem(
			'userData',
			JSON.stringify({
				token: token,
				userId: userId,
				expiryDate: expirationDate.toISOString(),
			})
		);
	} catch (e) {
		// saving error
		alert(
			`–ù–µ—É—Å–ø–µ—à–µ–Ω –∑–∞–ø–∏—Å –Ω–∞ –¥–∞–Ω–Ω–∏ –≤ –ø–∞–º–µ—Ç—Ç–∞ –Ω–∞ —É—Å—Ç–æ–π—Å—Ç–≤–æ—Ç–æ! response error :${e} `
		);
	}
};
